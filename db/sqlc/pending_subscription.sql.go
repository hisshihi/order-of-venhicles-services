// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pending_subscription.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createPendingSubscription = `-- name: CreatePendingSubscription :one
INSERT INTO pending_subscriptions (
        payment_id,
        user_id,
        subscription_type,
        start_date,
        end_date,
        original_price,
        final_price,
        promo_code_id,
        is_update
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    )
RETURNING id, payment_id, user_id, subscription_type, start_date, end_date, original_price, final_price, promo_code_id, is_update, created_at, updated_at
`

type CreatePendingSubscriptionParams struct {
	PaymentID        int64         `json:"payment_id"`
	UserID           int64         `json:"user_id"`
	SubscriptionType string        `json:"subscription_type"`
	StartDate        time.Time     `json:"start_date"`
	EndDate          time.Time     `json:"end_date"`
	OriginalPrice    string        `json:"original_price"`
	FinalPrice       string        `json:"final_price"`
	PromoCodeID      sql.NullInt64 `json:"promo_code_id"`
	IsUpdate         bool          `json:"is_update"`
}

func (q *Queries) CreatePendingSubscription(ctx context.Context, arg CreatePendingSubscriptionParams) (PendingSubscription, error) {
	row := q.db.QueryRowContext(ctx, createPendingSubscription,
		arg.PaymentID,
		arg.UserID,
		arg.SubscriptionType,
		arg.StartDate,
		arg.EndDate,
		arg.OriginalPrice,
		arg.FinalPrice,
		arg.PromoCodeID,
		arg.IsUpdate,
	)
	var i PendingSubscription
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.UserID,
		&i.SubscriptionType,
		&i.StartDate,
		&i.EndDate,
		&i.OriginalPrice,
		&i.FinalPrice,
		&i.PromoCodeID,
		&i.IsUpdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePendingSubscriptionByPaymentID = `-- name: DeletePendingSubscriptionByPaymentID :exec
DELETE FROM pending_subscriptions
WHERE payment_id = $1
`

func (q *Queries) DeletePendingSubscriptionByPaymentID(ctx context.Context, paymentID int64) error {
	_, err := q.db.ExecContext(ctx, deletePendingSubscriptionByPaymentID, paymentID)
	return err
}

const getPendingSubscriptionByPaymentID = `-- name: GetPendingSubscriptionByPaymentID :one
SELECT id, payment_id, user_id, subscription_type, start_date, end_date, original_price, final_price, promo_code_id, is_update, created_at, updated_at
FROM pending_subscriptions
WHERE payment_id = $1
`

func (q *Queries) GetPendingSubscriptionByPaymentID(ctx context.Context, paymentID int64) (PendingSubscription, error) {
	row := q.db.QueryRowContext(ctx, getPendingSubscriptionByPaymentID, paymentID)
	var i PendingSubscription
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.UserID,
		&i.SubscriptionType,
		&i.StartDate,
		&i.EndDate,
		&i.OriginalPrice,
		&i.FinalPrice,
		&i.PromoCodeID,
		&i.IsUpdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
