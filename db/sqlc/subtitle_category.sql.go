// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subtitle_category.sql

package sqlc

import (
	"context"
)

const createSubtitle = `-- name: CreateSubtitle :one
INSERT INTO subtitle_category (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateSubtitle(ctx context.Context, name string) (SubtitleCategory, error) {
	row := q.db.QueryRowContext(ctx, createSubtitle, name)
	var i SubtitleCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubtitleCategory = `-- name: DeleteSubtitleCategory :execrows
DELETE FROM subtitle_category
WHERE id = $1
`

func (q *Queries) DeleteSubtitleCategory(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSubtitleCategory, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getSubtitleCategoryByID = `-- name: GetSubtitleCategoryByID :one
SELECT id, name, created_at, updated_at FROM subtitle_category
WHERE id = $1
`

func (q *Queries) GetSubtitleCategoryByID(ctx context.Context, id int64) (SubtitleCategory, error) {
	row := q.db.QueryRowContext(ctx, getSubtitleCategoryByID, id)
	var i SubtitleCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubtitleCategory = `-- name: ListSubtitleCategory :many
SELECT id, name, created_at, updated_at FROM subtitle_category
ORDER BY name ASC
`

func (q *Queries) ListSubtitleCategory(ctx context.Context) ([]SubtitleCategory, error) {
	rows, err := q.db.QueryContext(ctx, listSubtitleCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SubtitleCategory{}
	for rows.Next() {
		var i SubtitleCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubtitleCategory = `-- name: UpdateSubtitleCategory :one
UPDATE subtitle_category
SET name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateSubtitleCategoryParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateSubtitleCategory(ctx context.Context, arg UpdateSubtitleCategoryParams) (SubtitleCategory, error) {
	row := q.db.QueryRowContext(ctx, updateSubtitleCategory, arg.ID, arg.Name)
	var i SubtitleCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
