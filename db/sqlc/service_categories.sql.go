// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: service_categories.sql

package sqlc

import (
	"context"
)

const createServiceCategory = `-- name: CreateServiceCategory :one
INSERT INTO service_categories (name, icon, description, slug)
VALUES ($1, $2, $3, $4)
RETURNING id, name, icon, description, slug, created_at, updated_at
`

type CreateServiceCategoryParams struct {
	Name        string `json:"name"`
	Icon        string `json:"icon"`
	Description string `json:"description"`
	Slug        string `json:"slug"`
}

func (q *Queries) CreateServiceCategory(ctx context.Context, arg CreateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServiceCategory,
		arg.Name,
		arg.Icon,
		arg.Description,
		arg.Slug,
	)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteServiceCategory = `-- name: DeleteServiceCategory :exec
DELETE FROM service_categories
WHERE id = $1
`

func (q *Queries) DeleteServiceCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteServiceCategory, id)
	return err
}

const getServiceCategoryByID = `-- name: GetServiceCategoryByID :one
SELECT id, name, icon, description, slug, created_at, updated_at FROM service_categories
WHERE id = $1
`

func (q *Queries) GetServiceCategoryByID(ctx context.Context, id int64) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, getServiceCategoryByID, id)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServiceCategoryBySlug = `-- name: GetServiceCategoryBySlug :one
SELECT id, name, icon, description, slug, created_at, updated_at FROM service_categories
WHERE slug = $1
`

func (q *Queries) GetServiceCategoryBySlug(ctx context.Context, slug string) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, getServiceCategoryBySlug, slug)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listServiceCategories = `-- name: ListServiceCategories :many
SELECT id, name, icon, description, slug, created_at, updated_at FROM service_categories
ORDER BY name ASC
`

func (q *Queries) ListServiceCategories(ctx context.Context) ([]ServiceCategory, error) {
	rows, err := q.db.QueryContext(ctx, listServiceCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceCategory{}
	for rows.Next() {
		var i ServiceCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceCategory = `-- name: UpdateServiceCategory :one
UPDATE service_categories
SET name = $2, icon = $3, description = $4, slug = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, name, icon, description, slug, created_at, updated_at
`

type UpdateServiceCategoryParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Icon        string `json:"icon"`
	Description string `json:"description"`
	Slug        string `json:"slug"`
}

func (q *Queries) UpdateServiceCategory(ctx context.Context, arg UpdateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, updateServiceCategory,
		arg.ID,
		arg.Name,
		arg.Icon,
		arg.Description,
		arg.Slug,
	)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
