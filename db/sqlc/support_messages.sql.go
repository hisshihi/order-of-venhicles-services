// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: support_messages.sql

package sqlc

import (
	"context"
)

const countSupportMessages = `-- name: CountSupportMessages :one
SELECT COUNT(*) FROM "support_messages"
`

func (q *Queries) CountSupportMessages(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSupportMessages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSupportMessage = `-- name: CreateSupportMessage :one
INSERT INTO "support_messages" ("sender_id", "subject", "messages")
VALUES ($1, $2, $3)
RETURNING id, sender_id, subject, messages, created_at
`

type CreateSupportMessageParams struct {
	SenderID int64  `json:"sender_id"`
	Subject  string `json:"subject"`
	Messages string `json:"messages"`
}

func (q *Queries) CreateSupportMessage(ctx context.Context, arg CreateSupportMessageParams) (SupportMessage, error) {
	row := q.db.QueryRowContext(ctx, createSupportMessage, arg.SenderID, arg.Subject, arg.Messages)
	var i SupportMessage
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.Subject,
		&i.Messages,
		&i.CreatedAt,
	)
	return i, err
}

const listSupportMessages = `-- name: ListSupportMessages :many
SELECT id, sender_id, subject, messages, created_at FROM "support_messages"
ORDER BY "created_at"
`

func (q *Queries) ListSupportMessages(ctx context.Context) ([]SupportMessage, error) {
	rows, err := q.db.QueryContext(ctx, listSupportMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SupportMessage{}
	for rows.Next() {
		var i SupportMessage
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.Subject,
			&i.Messages,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
