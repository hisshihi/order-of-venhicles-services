// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: message.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "messages" (sender_id, receiver_id, content)
VALUES ($1, $2, $3)
RETURNING id, sender_id, receiver_id, content, is_read, created_at
`

type CreateMessageParams struct {
	SenderID   int64  `json:"sender_id"`
	ReceiverID int64  `json:"receiver_id"`
	Content    string `json:"content"`
}

// Создает новое сообщение
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.SenderID, arg.ReceiverID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Content,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByUsers = `-- name: GetMessagesByUsers :many
SELECT m.id, m.sender_id, m.receiver_id, m.content, m.is_read, m.created_at,
    s.username as sender_name,
    r.username as receiver_name
FROM "messages" m
    JOIN "users" s ON m.sender_id = s.id
    JOIN "users" r ON m.receiver_id = r.id
WHERE (
        m.sender_id = $1
        AND m.receiver_id = $2
    )
    OR (
        m.sender_id = $2
        AND m.receiver_id = $1
    )
ORDER BY m.created_at ASC
LIMIT $3 OFFSET $4
`

type GetMessagesByUsersParams struct {
	SenderID   int64 `json:"sender_id"`
	ReceiverID int64 `json:"receiver_id"`
	Limit      int64 `json:"limit"`
	Offset     int64 `json:"offset"`
}

type GetMessagesByUsersRow struct {
	ID           int64        `json:"id"`
	SenderID     int64        `json:"sender_id"`
	ReceiverID   int64        `json:"receiver_id"`
	Content      string       `json:"content"`
	IsRead       sql.NullBool `json:"is_read"`
	CreatedAt    time.Time    `json:"created_at"`
	SenderName   string       `json:"sender_name"`
	ReceiverName string       `json:"receiver_name"`
}

// Получает историю переписки между двумя пользователями
func (q *Queries) GetMessagesByUsers(ctx context.Context, arg GetMessagesByUsersParams) ([]GetMessagesByUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByUsers,
		arg.SenderID,
		arg.ReceiverID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMessagesByUsersRow{}
	for rows.Next() {
		var i GetMessagesByUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.ReceiverID,
			&i.Content,
			&i.IsRead,
			&i.CreatedAt,
			&i.SenderName,
			&i.ReceiverName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadMessagesCount = `-- name: GetUnreadMessagesCount :one
SELECT COUNT(*)
FROM "messages"
WHERE receiver_id = $1
    AND is_read = false
`

// Получает количество непрочитанных сообщений для пользователя
func (q *Queries) GetUnreadMessagesCount(ctx context.Context, receiverID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnreadMessagesCount, receiverID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserRecentChats = `-- name: GetUserRecentChats :many
WITH recent_messages AS (
    SELECT DISTINCT ON (
            CASE
                WHEN sender_id = $1 THEN receiver_id
                ELSE sender_id
            END
        ) id,
        CASE
            WHEN sender_id = $1 THEN receiver_id
            ELSE sender_id
        END as other_user_id,
        content,
        created_at
    FROM "messages"
    WHERE sender_id = $1
        OR receiver_id = $1
    ORDER BY other_user_id,
        created_at DESC
)
SELECT rm.id as message_id,
    rm.other_user_id,
    u.username as other_user_name,
    u.photo_url as other_user_photo,
    rm.content as last_message,
    rm.created_at as message_time,
    (
        SELECT COUNT(*)
        FROM "messages"
        WHERE sender_id = rm.other_user_id
            AND receiver_id = $1
            AND is_read = false
    ) as unread_count
FROM recent_messages rm
    JOIN "users" u ON rm.other_user_id = u.id
ORDER BY rm.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserRecentChatsParams struct {
	Column1 sql.NullInt64 `json:"column_1"`
	Column2 sql.NullInt64 `json:"column_2"`
	Column3 sql.NullInt64 `json:"column_3"`
}

type GetUserRecentChatsRow struct {
	MessageID      int64         `json:"message_id"`
	OtherUserID    sql.NullInt64 `json:"other_user_id"`
	OtherUserName  string        `json:"other_user_name"`
	OtherUserPhoto []byte        `json:"other_user_photo"`
	LastMessage    string        `json:"last_message"`
	MessageTime    time.Time     `json:"message_time"`
	UnreadCount    int64         `json:"unread_count"`
}

// Получает список недавних чатов пользователя
func (q *Queries) GetUserRecentChats(ctx context.Context, arg GetUserRecentChatsParams) ([]GetUserRecentChatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRecentChats, arg.Column1, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRecentChatsRow{}
	for rows.Next() {
		var i GetUserRecentChatsRow
		if err := rows.Scan(
			&i.MessageID,
			&i.OtherUserID,
			&i.OtherUserName,
			&i.OtherUserPhoto,
			&i.LastMessage,
			&i.MessageTime,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMessagesAsRead = `-- name: MarkMessagesAsRead :exec
UPDATE "messages"
SET is_read = true
WHERE receiver_id = $1
    AND sender_id = $2
    AND is_read = false
`

type MarkMessagesAsReadParams struct {
	ReceiverID int64 `json:"receiver_id"`
	SenderID   int64 `json:"sender_id"`
}

// Отмечает сообщения как прочитанные
func (q *Queries) MarkMessagesAsRead(ctx context.Context, arg MarkMessagesAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markMessagesAsRead, arg.ReceiverID, arg.SenderID)
	return err
}
