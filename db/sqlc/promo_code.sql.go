// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: promo_code.sql

package sqlc

import (
	"context"
	"time"
)

const createPromoCode = `-- name: CreatePromoCode :one
INSERT INTO promo_codes (partner_id, code, discount_percentage, valid_until)
VALUES ($1, $2, $3, $4)
RETURNING id, partner_id, code, discount_percentage, valid_until, created_at, updated_at
`

type CreatePromoCodeParams struct {
	PartnerID          int64     `json:"partner_id"`
	Code               string    `json:"code"`
	DiscountPercentage int32     `json:"discount_percentage"`
	ValidUntil         time.Time `json:"valid_until"`
}

func (q *Queries) CreatePromoCode(ctx context.Context, arg CreatePromoCodeParams) (PromoCode, error) {
	row := q.db.QueryRowContext(ctx, createPromoCode,
		arg.PartnerID,
		arg.Code,
		arg.DiscountPercentage,
		arg.ValidUntil,
	)
	var i PromoCode
	err := row.Scan(
		&i.ID,
		&i.PartnerID,
		&i.Code,
		&i.DiscountPercentage,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePromoCode = `-- name: DeletePromoCode :exec
DELETE FROM promo_codes
WHERE id = $1
`

func (q *Queries) DeletePromoCode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePromoCode, id)
	return err
}

const getPromoCodeByID = `-- name: GetPromoCodeByID :one
SELECT id, partner_id, code, discount_percentage, valid_until, created_at, updated_at FROM promo_codes
WHERE id = $1
`

func (q *Queries) GetPromoCodeByID(ctx context.Context, id int64) (PromoCode, error) {
	row := q.db.QueryRowContext(ctx, getPromoCodeByID, id)
	var i PromoCode
	err := row.Scan(
		&i.ID,
		&i.PartnerID,
		&i.Code,
		&i.DiscountPercentage,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromoCodeByPartnerID = `-- name: GetPromoCodeByPartnerID :one
SELECT id, partner_id, code, discount_percentage, valid_until, created_at, updated_at FROM promo_codes
WHERE partner_id = $1
`

func (q *Queries) GetPromoCodeByPartnerID(ctx context.Context, partnerID int64) (PromoCode, error) {
	row := q.db.QueryRowContext(ctx, getPromoCodeByPartnerID, partnerID)
	var i PromoCode
	err := row.Scan(
		&i.ID,
		&i.PartnerID,
		&i.Code,
		&i.DiscountPercentage,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPromoCodes = `-- name: ListPromoCodes :many
SELECT id, partner_id, code, discount_percentage, valid_until, created_at, updated_at FROM promo_codes
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPromoCodesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListPromoCodes(ctx context.Context, arg ListPromoCodesParams) ([]PromoCode, error) {
	rows, err := q.db.QueryContext(ctx, listPromoCodes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PromoCode{}
	for rows.Next() {
		var i PromoCode
		if err := rows.Scan(
			&i.ID,
			&i.PartnerID,
			&i.Code,
			&i.DiscountPercentage,
			&i.ValidUntil,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePromoCode = `-- name: UpdatePromoCode :one
UPDATE promo_codes
SET partner_id = $2, code = $3, discount_percentage = $4, valid_until = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, partner_id, code, discount_percentage, valid_until, created_at, updated_at
`

type UpdatePromoCodeParams struct {
	ID                 int64     `json:"id"`
	PartnerID          int64     `json:"partner_id"`
	Code               string    `json:"code"`
	DiscountPercentage int32     `json:"discount_percentage"`
	ValidUntil         time.Time `json:"valid_until"`
}

func (q *Queries) UpdatePromoCode(ctx context.Context, arg UpdatePromoCodeParams) (PromoCode, error) {
	row := q.db.QueryRowContext(ctx, updatePromoCode,
		arg.ID,
		arg.PartnerID,
		arg.Code,
		arg.DiscountPercentage,
		arg.ValidUntil,
	)
	var i PromoCode
	err := row.Scan(
		&i.ID,
		&i.PartnerID,
		&i.Code,
		&i.DiscountPercentage,
		&i.ValidUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
