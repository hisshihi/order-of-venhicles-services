// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription.sql

package sqlc

import (
	"context"
	"time"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (provider_id, start_date, end_date, status)
VALUES ($1, $2, $3, $4)
RETURNING id, provider_id, start_date, end_date, status, created_at, updated_at
`

type CreateSubscriptionParams struct {
	ProviderID int64                  `json:"provider_id"`
	StartDate  time.Time              `json:"start_date"`
	EndDate    time.Time              `json:"end_date"`
	Status     NullStatusSubscription `json:"status"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.ProviderID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions
WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, id)
	return err
}

const getSubscriptionByID = `-- name: GetSubscriptionByID :one
SELECT id, provider_id, start_date, end_date, status, created_at, updated_at FROM subscriptions
WHERE id = $1
`

func (q *Queries) GetSubscriptionByID(ctx context.Context, id int64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByID, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, provider_id, start_date, end_date, status, created_at, updated_at FROM subscriptions
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListSubscriptionsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListSubscriptions(ctx context.Context, arg ListSubscriptionsParams) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subscription{}
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions
SET provider_id = $2, start_date = $3, end_date = $4, status = $5
WHERE id = $1
RETURNING id, provider_id, start_date, end_date, status, created_at, updated_at
`

type UpdateSubscriptionParams struct {
	ID         int64                  `json:"id"`
	ProviderID int64                  `json:"provider_id"`
	StartDate  time.Time              `json:"start_date"`
	EndDate    time.Time              `json:"end_date"`
	Status     NullStatusSubscription `json:"status"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscription,
		arg.ID,
		arg.ProviderID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
